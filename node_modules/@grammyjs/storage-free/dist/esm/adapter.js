class Storage {
    constructor(token, rootUrl = 'https://grammy-free-session.deno.dev/api') {
        this.token = token;
        this.rootUrl = rootUrl;
    }
    async login() {
        if (this.jwt === undefined) {
            const url = `${this.rootUrl}/login`;
            const body = JSON.stringify({ token: this.token });
            const response = await retryFetch(url, { method: 'POST', body });
            const { token } = await response.json();
            if (typeof token !== 'string') {
                throw new Error('Cannot use free session, invalid bot token!');
            }
            this.jwt = token;
        }
        return this.jwt;
    }
    logout() {
        this.jwt = undefined;
    }
    async call(method, key, body) {
        // perform request
        const url = `${this.rootUrl}/session/${key}`;
        const jwt = await this.login();
        const headers = { 'Authorization': `Bearer ${jwt}` };
        const response = await retryFetch(url, { method, body, headers });
        // handle response
        if (response.status === 401) {
            // token was revoked, must login again
            this.logout();
            return await this.call(method, key, body);
        }
        else if (response.status === 404) {
            // empty session
            return undefined;
        }
        else if (200 <= response.status && response.status < 300) {
            // success
            return method === 'GET' ? await response.text() : undefined;
        }
        else {
            // error
            throw new Error(`${response.status}: ${(await response.json()).error}`);
        }
    }
}
/**
 * @param token The bot token of your bot.
 * @param opts Further configuration options
 * @returns An adapter to grammY's free session storage
 */
export function freeStorage(token, opts) {
    const storage = new Storage(token, opts === null || opts === void 0 ? void 0 : opts.rootUrl);
    if ((opts === null || opts === void 0 ? void 0 : opts.jwt) !== undefined)
        storage.jwt = opts.jwt;
    return {
        async read(key) {
            const session = await storage.call('GET', key);
            return session === undefined ? undefined : JSON.parse(session);
        },
        async write(key, data) {
            await storage.call('POST', key, JSON.stringify(data));
        },
        async delete(key) {
            await storage.call('DELETE', key);
        },
        /**
         * Returns the storage authentication token which is used to store the
         * session data. Only useful if you want to avoid the login call that will
         * be performed automatically when the storage adapter contacts its backend
         * for the first time. This can improve startup performance and is
         * especially useful in serverless environments.
         */
        async getToken() {
            return await storage.login();
        },
    };
}
async function retryFetch(...args) {
    let res;
    let delay = 10; // ms
    do {
        res = await fetch(...args);
        if (res.status >= 500) {
            console.error(`${res.status} in free session service, retrying!`);
            await sleep(delay);
            delay += delay; // exponential back-off
            delay = Math.min(delay, 1000 * 60 * 60); // cap at 1 hour
        }
    } while (res.status >= 500);
    return res;
}
async function sleep(ms) {
    await new Promise((r) => setTimeout(r, ms));
}
import { fetch } from "./shim.node.js";
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRhcHRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hZGFwdGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sT0FBTztJQUVYLFlBQ21CLEtBQWEsRUFDYixVQUFVLDBDQUEwQztRQURwRCxVQUFLLEdBQUwsS0FBSyxDQUFRO1FBQ2IsWUFBTyxHQUFQLE9BQU8sQ0FBNkM7SUFDcEUsQ0FBQztJQUVKLEtBQUssQ0FBQyxLQUFLO1FBQ1QsSUFBSSxJQUFJLENBQUMsR0FBRyxLQUFLLFNBQVMsRUFBRTtZQUMxQixNQUFNLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxPQUFPLFFBQVEsQ0FBQztZQUNwQyxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO1lBQ25ELE1BQU0sUUFBUSxHQUFHLE1BQU0sVUFBVSxDQUFDLEdBQUcsRUFBRSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztZQUNqRSxNQUFNLEVBQUUsS0FBSyxFQUFFLEdBQUcsTUFBTSxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDeEMsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLEVBQUU7Z0JBQzdCLE1BQU0sSUFBSSxLQUFLLENBQUMsNkNBQTZDLENBQUMsQ0FBQzthQUNoRTtZQUNELElBQUksQ0FBQyxHQUFHLEdBQUcsS0FBSyxDQUFDO1NBQ2xCO1FBQ0QsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDO0lBQ2xCLENBQUM7SUFFRCxNQUFNO1FBQ0osSUFBSSxDQUFDLEdBQUcsR0FBRyxTQUFTLENBQUM7SUFDdkIsQ0FBQztJQUVELEtBQUssQ0FBQyxJQUFJLENBQ1IsTUFBaUMsRUFDakMsR0FBVyxFQUNYLElBQWE7UUFFYixrQkFBa0I7UUFDbEIsTUFBTSxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsT0FBTyxZQUFZ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LElBQUksR0FBRyxFQUFFO1lBQ3JCLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxHQUFHLENBQUMsTUFBTSxxQ0FBcUMsQ0FBQyxDQUFDO1lBQ2xFLE1BQU0sS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ25CLEtBQUssSUFBSSxLQUFLLENBQUMsQ0FBQyx1QkFBdUI7WUFDdkMsS0FBSyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLElBQUksR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxnQkFBZ0I7U0FDMUQ7S0FDRixRQUFRLEdBQUcsQ0FBQyxNQUFNLElBQUksR0FBRyxFQUFFO0lBQzVCLE9BQU8sR0FBRyxDQUFDO0FBQ2IsQ0FBQztBQUVELEtBQUssVUFBVSxLQUFLLENBQUMsRUFBVTtJQUM3QixNQUFNLElBQUksT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxVQUFVLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDOUMsQ0FBQztBQUVELE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQyJ9